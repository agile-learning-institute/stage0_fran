name: Fran API Check
version: "1.0"
env:
  host: localhost:8580
config:
  loadTest:
    phases:
      - duration: 5
        arrivalRate: 50

tests:
  observable:
    name: Test Observability
    steps:
      - name: GET Config Values
        http:
          url: http://${{env.host}}/api/config
          method: GET
          check:
            status: /200/
            schema:
              type: object
              properties:
                config_items:
                  type: array
                versions:
                  type: array
                enumerators:
                  type: object
                token:
                  type: object
              required:
                - config_items
                - versions
                - enumerators
                - token
              additionalProperties: false
      - name: GET Health
        http:
          url: http://${{env.host}}/api/health
          method: GET
          check:
            status: /200/
  chains:
    name: Test Chain endpoints
    steps:
      - name: Get All Chains
        http:
          url: http://${{env.host}}/api/chain
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
      - name: Get one Chain
        http:
          url: http://${{env.host}}/api/chain/a00000000000000000000001
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
  exercises:
    name: Test Exercise endpoints
    steps:
      - name: Get All Exercises
        http:
          url: http://${{env.host}}/api/exercise
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
      - name: Get one Exercise
        http:
          url: http://${{env.host}}/api/exercise/b00000000000000000000001
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
  bots:
    steps:
      - name: Get some Bots
        http:
          url: http://${{env.host}}/api/bot
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            schema:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                  description:
                    type: string
                  name:
                    type: string
                required:
                  - _id
                  - description
                  - name
                additionalProperties: false
      - name: Get a Bot
        http:
          url: http://${{env.host}}/api/bot/bbb000000000000000000001
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            Content-Type: application/json          
            schema:
              type: object
              properties:
                _id:
                  type: string
                status:
                  type: string
                name:
                  type: string
                description:
                  type: string
                channels:
                  type: array
                  items:
                    type: string
                last_saved:
                  type: object
                  properties:
                    fromIp:
                      type: string
                    byUser:
                      type: string
                    atTime:
                      type: string
                    correlationId:
                      type: string
                  additionalProperties: false
              additionalProperties: false
            jsonpath:
              status: active
              name: Fran
              channels[0]: TEST_CHANNEL_1
              channels[1]: TEST_CHANNEL_2
      - name: Update a bot
        http:
          url: http://${{env.host}}/api/bot/bbb000000000000000000001
          method: PATCH
          headers:
            Content-Type: application/json
          json: 
            description: StepCI Testing description
          check:
            status: /200/
            jsonpath:
              description: StepCI Testing description
      - name: Reset bot Update
        http:
          url: http://${{env.host}}/api/bot/bbb000000000000000000001
          method: PATCH
          headers:
            Content-Type: application/json
          json: 
            description: Fran the Design Thinking Facilitator
          check:
            status: /200/
            jsonpath:
              description: Fran the Design Thinking Facilitator
      - name: Get bot channels
        http:
          url: http://${{env.host}}/api/bot/bbb000000000000000000001/channels
          method: GET
          headers:
            Content-Type: application/json
          check:
            status: /200/
            jsonpath:
              - TEST_CHANNEL_1
              - TEST_CHANNEL_2
      - name: Add a channel
        http:
          url: http://${{env.host}}/api/bot/bbb000000000000000000001/channel/DISCORD_CHANNEL_NAME
          method: POST
          headers:
            Content-Type: application/json
          check:
            status: /200/
            jsonpath:
              - TEST_CHANNEL_1
              - TEST_CHANNEL_2
              - DISCORD_CHANNEL_NAME
      - name: Remove a channel
        http:
          url: http://${{env.host}}/api/bot/bbb000000000000000000001/channel/DISCORD_CHANNEL_NAME
          method: DELETE
          headers:
            Content-Type: application/json
          check:
            status: /200/
            jsonpath:
              - TEST_CHANNEL_1
              - TEST_CHANNEL_2
  conversations:
    steps:
      - name: Get all latest active Conversations
        http:
          url: http://${{env.host}}/api/conversation
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            schema:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                required:
                  - _id
                  - name
                additionalProperties: false
      - name: Get some latest active Conversations
        http:
          url: http://${{env.host}}/api/conversation?query=^D
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
      - name: Get a Conversation
        http:
          url: http://${{env.host}}/api/conversation/DISCORD_01
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
              status: active
              name: DISCORD_01
              version: latest
              conversation[0]: Hi
              conversation[1]: Hello
      - name: Add a message to a Conversation
        http:
          url: http://${{env.host}}/api/conversation/DISCORD_01/message
          method: POST
          headers:
            Content-Type: text/plain
          body: This is a new message
          check:
            status: /200/
            schema:
              type: array
              items:
                type: string
            jsonpath:
  workshops:
    steps:
      - name: Get all active Workshops
        http:
          url: http://${{env.host}}/api/workshop
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
      - name: Get some active Workshops
        http:
          url: http://${{env.host}}/api/workshop?query=^p
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
      - name: Get a Workshop
        http:
          url: http://${{env.host}}/api/workshop/000000000000000000000001
          method: GET
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
      - name: Create a Workshop
        http:
          url: http://${{env.host}}/api/workshop/new/a00000000000000000000001
          method: POST
          headers:
            Content-Type: application/json          
          json:
            name: StepCI Testing Workshop
          check:
            status: /200/
            jsonpath:
      - name: Update a Workshop
        http:
          url: http://${{env.host}}/api/workshop/000000000000000000000001
          method: PATCH
          headers:
            Content-Type: application/json          
          json:
            name: Updated StepCI Testing Workshop
          check:
            status: /200/
            jsonpath:
      - name: Start a Workshop
        http:
          url: http://${{env.host}}/api/workshop/000000000000000000000001/start
          method: POST
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
      - name: Advance a Workshop
        http:
          url: http://${{env.host}}/api/workshop/000000000000000000000001/next
          method: POST
          headers:
            Content-Type: application/json          
          check:
            status: /200/
            jsonpath:
      - name: Add an Observation
        http:
          url: http://${{env.host}}/api/workshop/000000000000000000000001/observation
          method: POST
          headers:
            Content-Type: application/json          
          json:
            name: A new observation
          check:
            status: /200/
            jsonpath:
